{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/design/", 
            "text": "Abstract Factory\n\n\nCreates families of related objects without depending on their specific classes.\n\n\nImplementaion example\n\n\nApp which lets the user decide weather connect to a website over http,\nhttps or ftp to list the directories of the corresponding web server (Zlobin\n2013, chapter \"The Factory Method Implementation\").\n\n\nImplementaion example\n\n\nCreation of a game dependent on the user age for childs (\"frog world\")\nor adults (\"wizard world\"). (Kasampalis 2015, chapter \"1. The Factory Pattern\",\nsubchapter \"Abstract Method\", subsubchapter \"Implementation\").\n\n\nAdapter\n\n\nMakes two incompatible interfaces compatible.\n\n\nImplementation example\n\n\nAbstract but running example of the Adapter Pattern implemented with\nthe internal dictionary of a class instead of the traditional implementation\nbased on inheritance (Kasampalis 2015, chapter \"4. The Adapter pattern\",\nsubchapter \"Implementation\").\n\n\nImplementation example\n\n\nExisting class does calculate a persons age dependent on the birthday\ndate as string input. Adapter class uses the existing class but provides an\ninterface which expects the birthday date in the datetime format (Phillips 2010,\nsection \"Adapter pattern\" / p. 257).\n\n\nBuilder\n\n\nComposition of a complex object consisting of different parts step by step.\n\n\nImplementation example\n\n\nThe configuration of imaginary computers with different configurations\npoints out the differences between the Builder Pattern and the Factory Pattern\n(Kasampalis 2015, chapter \"2. The Builder Pattern\", subchapter \"Uses cases\").\n\n\nImplementaion example\n\n\nPreparing imaginary pizzas with different ingredients but whose\npreparation follow a common procedure (Kasampalis 2015, chapter \"2. The Build\nPattern\", subchapter \"Implementation\").\n\n\nContainer\n\n\nAbstracts away data structuring from application domain classes.\n\n\nImplementation example\n\n\nThe standard library of Python 3 provides many built-in containers\n(dict, list, set, tuple) and specialized container datatypes (namedtuple, deque,\nChainMap, Counter, OrderedDict, defaultDict, UserDict, UserList, UserString)\nin the module \ncollections\n.\n\n\nFacade\n\n\nImplementaion example\n\n\nAccess layer to a SQLite database for blog and related post objects\n(Lott 2014, chapter \"Designing an access layer for SQLite\").\n\n\nFactory Method\n\n\nDefines an interface for creating an instance of an object but lets the class\nwhich implements the interface decide which class to instantiate.\n\n\nImplementaion example\n\n\nApp which lets the user decide weather connect to a website over http\nor ftp to list the directories of the corresponding web server (Zlobin 2013,\nchapter \"The Factory Method Implementation\").\n\n\nImplementaion example\n\n\nCreation of objects for handling the input data in XML format or in\nJSON format and parsing it correspondingly. (Kasampalis 2015, chapter \"1. The\nFactory Pattern\", subchapter \"Factory Method\", subsubchapter \"Implementation\").\n\n\nModel View Controller\n\n\nSeparates the application (or part of it) into the parts model (data and logic),\nview (HMI) and controller (links the model and the view).\n\n\nImplementation example\n\n\nWeb interface URL-shortening service implemented with the framework\nflask which does not support the MVC pattern out-of-the-box (Zlobin 2013, \nsection \"1. Model-View-Controller\", subchapter \"Implementation in Python\").\n\n\nImplemetation example\n\n\nThe chess game objects chessboard and pieces (model) are linked to the\ngraphical representation (view) over mouse events (controller) (Chaudhary 2013,\nsection \"Project 4: Game of Chess\"). (The separation into model, view and\ncontroller is not that obvious because the view and the model are placed into a\nsingle python file \"gui.py\".)\n\n\nObserver\n\n\nNotification of clients about the status of a data server.\n\n\nImplementation example\n\n\nThe system time (subject) notifies its observers (12 hour formatter,\n24 hour formatter) about a change which convert and print the time accordingly\n(Zlobin 2013, chapter \"Observer design pattern\", subsection \"Implementation in\nPython\" / Kindle pos. 924).\n\n\nImplementation example\n\n\nThe value (subject) notifies its observers (hex formatter, binary\nformatter) about a change which convert an print the value accoringly\n(Kasampalis 2015, section \"Chapter 13. The Observer Pattern\", subsection\n\"Implementation\" / Kindle pos. 2416).\n\n\nPrototype\n\n\nCreation of an exact copy of an object.\n\n\nImplementation example\n\n\nCreation of information about the second version of a book based on\nthe first version information by using pythons deepcopy functionality\ncopy.deepcopy() (Kasampalis 2015, chapter \"3. The Prototype Pattern\").\n\n\nSingleton\n\n\nEnsures that only one instance of a class may be created.\n\n\nImplementation example\n\n\n__new__ class method ensures that only one instance of the class is\ncreated (using call \"super\") and returns the same single instance if \"one is\ncreated\" afterwards (Philipps 2010, section \"Singleton implementation\").\n\n\nImplementation example\n\n\nA state based parser instantiates a class and assigns it immediatelly\nafterwards to a module variable (Phillips 2010, section \"Module variables can\nmimic singletons\").\n\n\nImplementation example\n\n\nBasic \"class\" singleton (Zlobin 2013, section \"A classic singleton\").\n\n\nImplementation example\n\n\nWebcrawler which scans for website-local hyperlinks, follows the links\nand downloads the pictures on it (Zlobin 2013, section \"Chapter 2. Creating\nOnly One Object with teh Singleton Pattern\", subsection \"Implementation in\nPython\" / Kindle pos. 417)\n\n\nImplicitly Instantiated Module Singleton\n\n\nPythonic variant/implementation of the singleton where an object is instantiated\nimmediately (after module import).\n\n\nImplementation example\n\n\nA state based parser instantiates a class and\nassigns it immediatelly afterwards to a module variable (Phillips 2010, section\n\"Module variables can mimic singletons\").\n\n\nImplementation example\n\n\nPythonic \"modul instead of class\" singleton\n(Zlobin 2013, section \"A module-level singleton\").\n\n\nImplementation example\n\n\nDatabase object is instantiated as module local object (Phillips, p. 47).\n\n\nExplicitly Instantiated Module Singleton\n\n\nPythonic variant/implementation of the singleton where the object is instantiated\nexplicitly.\n\n\nProblem\n\n\n\n\nin Python objects are created immediatelly after modules are imported\n\n\nif performance is critical or the object data not available yet a delayed\n   instantiation may be required\n\n\n\n\nImplementation example\n\n\nDatabase object may be instantiated as module local object per\nfunction call (Phillips, p. 47). (Phillips, p. 48).\n\n\nBorg singleton\n\n\nUses a shared state to ensure that successors of a singleton class are also\nsingletons.\n\n\nImplementation example\n\n\nBorg singleton implements a shared resource (to store images) and a\nset of URLs  which are accessed by 2 threads which fetch images of the URLs and\nstores them (Zlobin 2013, chapter \"2. Creating Only One Object with the\nSingleton Pattern\", subchapter \"Implementation in Python\").\n\n\nState\n\n\nImplementation example\n\n\nEmulation of basic operation system process states and transitions\nusing the module \"state_machine\" (Kasampalis 2015, chapter \"Chapter 14. The\nState Pattern\", subchapter \"Implementation\").", 
            "title": "Design Patterns"
        }, 
        {
            "location": "/design/#abstract-factory", 
            "text": "Creates families of related objects without depending on their specific classes.  Implementaion example  App which lets the user decide weather connect to a website over http,\nhttps or ftp to list the directories of the corresponding web server (Zlobin\n2013, chapter \"The Factory Method Implementation\").  Implementaion example  Creation of a game dependent on the user age for childs (\"frog world\")\nor adults (\"wizard world\"). (Kasampalis 2015, chapter \"1. The Factory Pattern\",\nsubchapter \"Abstract Method\", subsubchapter \"Implementation\").", 
            "title": "Abstract Factory"
        }, 
        {
            "location": "/design/#adapter", 
            "text": "Makes two incompatible interfaces compatible.  Implementation example  Abstract but running example of the Adapter Pattern implemented with\nthe internal dictionary of a class instead of the traditional implementation\nbased on inheritance (Kasampalis 2015, chapter \"4. The Adapter pattern\",\nsubchapter \"Implementation\").  Implementation example  Existing class does calculate a persons age dependent on the birthday\ndate as string input. Adapter class uses the existing class but provides an\ninterface which expects the birthday date in the datetime format (Phillips 2010,\nsection \"Adapter pattern\" / p. 257).", 
            "title": "Adapter"
        }, 
        {
            "location": "/design/#builder", 
            "text": "Composition of a complex object consisting of different parts step by step.  Implementation example  The configuration of imaginary computers with different configurations\npoints out the differences between the Builder Pattern and the Factory Pattern\n(Kasampalis 2015, chapter \"2. The Builder Pattern\", subchapter \"Uses cases\").  Implementaion example  Preparing imaginary pizzas with different ingredients but whose\npreparation follow a common procedure (Kasampalis 2015, chapter \"2. The Build\nPattern\", subchapter \"Implementation\").", 
            "title": "Builder"
        }, 
        {
            "location": "/design/#container", 
            "text": "Abstracts away data structuring from application domain classes.  Implementation example  The standard library of Python 3 provides many built-in containers\n(dict, list, set, tuple) and specialized container datatypes (namedtuple, deque,\nChainMap, Counter, OrderedDict, defaultDict, UserDict, UserList, UserString)\nin the module  collections .", 
            "title": "Container"
        }, 
        {
            "location": "/design/#facade", 
            "text": "Implementaion example  Access layer to a SQLite database for blog and related post objects\n(Lott 2014, chapter \"Designing an access layer for SQLite\").", 
            "title": "Facade"
        }, 
        {
            "location": "/design/#factory-method", 
            "text": "Defines an interface for creating an instance of an object but lets the class\nwhich implements the interface decide which class to instantiate.  Implementaion example  App which lets the user decide weather connect to a website over http\nor ftp to list the directories of the corresponding web server (Zlobin 2013,\nchapter \"The Factory Method Implementation\").  Implementaion example  Creation of objects for handling the input data in XML format or in\nJSON format and parsing it correspondingly. (Kasampalis 2015, chapter \"1. The\nFactory Pattern\", subchapter \"Factory Method\", subsubchapter \"Implementation\").", 
            "title": "Factory Method"
        }, 
        {
            "location": "/design/#model-view-controller", 
            "text": "Separates the application (or part of it) into the parts model (data and logic),\nview (HMI) and controller (links the model and the view).  Implementation example  Web interface URL-shortening service implemented with the framework\nflask which does not support the MVC pattern out-of-the-box (Zlobin 2013, \nsection \"1. Model-View-Controller\", subchapter \"Implementation in Python\").  Implemetation example  The chess game objects chessboard and pieces (model) are linked to the\ngraphical representation (view) over mouse events (controller) (Chaudhary 2013,\nsection \"Project 4: Game of Chess\"). (The separation into model, view and\ncontroller is not that obvious because the view and the model are placed into a\nsingle python file \"gui.py\".)", 
            "title": "Model View Controller"
        }, 
        {
            "location": "/design/#observer", 
            "text": "Notification of clients about the status of a data server.  Implementation example  The system time (subject) notifies its observers (12 hour formatter,\n24 hour formatter) about a change which convert and print the time accordingly\n(Zlobin 2013, chapter \"Observer design pattern\", subsection \"Implementation in\nPython\" / Kindle pos. 924).  Implementation example  The value (subject) notifies its observers (hex formatter, binary\nformatter) about a change which convert an print the value accoringly\n(Kasampalis 2015, section \"Chapter 13. The Observer Pattern\", subsection\n\"Implementation\" / Kindle pos. 2416).", 
            "title": "Observer"
        }, 
        {
            "location": "/design/#prototype", 
            "text": "Creation of an exact copy of an object.  Implementation example  Creation of information about the second version of a book based on\nthe first version information by using pythons deepcopy functionality\ncopy.deepcopy() (Kasampalis 2015, chapter \"3. The Prototype Pattern\").", 
            "title": "Prototype"
        }, 
        {
            "location": "/design/#singleton", 
            "text": "Ensures that only one instance of a class may be created.  Implementation example  __new__ class method ensures that only one instance of the class is\ncreated (using call \"super\") and returns the same single instance if \"one is\ncreated\" afterwards (Philipps 2010, section \"Singleton implementation\").  Implementation example  A state based parser instantiates a class and assigns it immediatelly\nafterwards to a module variable (Phillips 2010, section \"Module variables can\nmimic singletons\").  Implementation example  Basic \"class\" singleton (Zlobin 2013, section \"A classic singleton\").  Implementation example  Webcrawler which scans for website-local hyperlinks, follows the links\nand downloads the pictures on it (Zlobin 2013, section \"Chapter 2. Creating\nOnly One Object with teh Singleton Pattern\", subsection \"Implementation in\nPython\" / Kindle pos. 417)", 
            "title": "Singleton"
        }, 
        {
            "location": "/design/#implicitly-instantiated-module-singleton", 
            "text": "Pythonic variant/implementation of the singleton where an object is instantiated\nimmediately (after module import).  Implementation example  A state based parser instantiates a class and\nassigns it immediatelly afterwards to a module variable (Phillips 2010, section\n\"Module variables can mimic singletons\").  Implementation example  Pythonic \"modul instead of class\" singleton\n(Zlobin 2013, section \"A module-level singleton\").  Implementation example  Database object is instantiated as module local object (Phillips, p. 47).", 
            "title": "Implicitly Instantiated Module Singleton"
        }, 
        {
            "location": "/design/#explicitly-instantiated-module-singleton", 
            "text": "Pythonic variant/implementation of the singleton where the object is instantiated\nexplicitly.  Problem   in Python objects are created immediatelly after modules are imported  if performance is critical or the object data not available yet a delayed\n   instantiation may be required   Implementation example  Database object may be instantiated as module local object per\nfunction call (Phillips, p. 47). (Phillips, p. 48).", 
            "title": "Explicitly Instantiated Module Singleton"
        }, 
        {
            "location": "/design/#borg-singleton", 
            "text": "Uses a shared state to ensure that successors of a singleton class are also\nsingletons.  Implementation example  Borg singleton implements a shared resource (to store images) and a\nset of URLs  which are accessed by 2 threads which fetch images of the URLs and\nstores them (Zlobin 2013, chapter \"2. Creating Only One Object with the\nSingleton Pattern\", subchapter \"Implementation in Python\").", 
            "title": "Borg singleton"
        }, 
        {
            "location": "/design/#state", 
            "text": "Implementation example  Emulation of basic operation system process states and transitions\nusing the module \"state_machine\" (Kasampalis 2015, chapter \"Chapter 14. The\nState Pattern\", subchapter \"Implementation\").", 
            "title": "State"
        }, 
        {
            "location": "/bibliography/", 
            "text": "Bibliography\n\n\nAuthor(s)\n family name, first name\n\n\nTitle: subtitle\n title with optional subtitle\n\n\nEdition\n \"agile\" means that no specific version or edition of the book exists. The book is generated automatically in a lean process.\n\n\n\n\n\n\n\n\nAuthor(s)\n\n\nTitle\n\n\nPublisher\n\n\nEdition\n\n\nYear\n\n\n\n\n\n\n\n\n\n\nKasampalis, Sakis\n\n\nMastering Python Design Patterns\n\n\nPackt Publishing Ltd.\n\n\n1st\n\n\n2015\n\n\n\n\n\n\nLott, Steven F.\n\n\nMastering Object Oriented Python\n\n\nPackt Publishing Ltd.\n\n\n1st\n\n\n2014\n\n\n\n\n\n\nPhillips, Dusty\n\n\nPython 3 Object Oriented Programming: Harness the power of Python 3 objects\n\n\nPackt Publishing Ltd.\n\n\n1st\n\n\n2010\n\n\n\n\n\n\nZlobin, Gennadiy\n\n\nLearning Python Design Patterns\n\n\nPackt Publishing Ltd.\n\n\n1st\n\n\n2013", 
            "title": "Bibliography"
        }, 
        {
            "location": "/bibliography/#bibliography", 
            "text": "Author(s)  family name, first name  Title: subtitle  title with optional subtitle  Edition  \"agile\" means that no specific version or edition of the book exists. The book is generated automatically in a lean process.     Author(s)  Title  Publisher  Edition  Year      Kasampalis, Sakis  Mastering Python Design Patterns  Packt Publishing Ltd.  1st  2015    Lott, Steven F.  Mastering Object Oriented Python  Packt Publishing Ltd.  1st  2014    Phillips, Dusty  Python 3 Object Oriented Programming: Harness the power of Python 3 objects  Packt Publishing Ltd.  1st  2010    Zlobin, Gennadiy  Learning Python Design Patterns  Packt Publishing Ltd.  1st  2013", 
            "title": "Bibliography"
        }
    ]
}